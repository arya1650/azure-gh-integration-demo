trigger:
  - main

pool:
  name: Default  # your self-hosted agent

variables:
  acrName: fakejavareg26769
  acrLoginServer: $(acrName).azurecr.io
  imageName: fake-java-app
  serviceConnection: devops-azure-service-conn
  aksResourceGroup: myDevOpsRG
  aksClusterName: myAKSCluster

stages:
- stage: Build
  displayName: Build & Push Image
  jobs:
  - job: build
    steps:
    - checkout: self
    - task: AzureCLI@2
      displayName: Docker buildx (multi-arch) & push
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'

          az acr login -n $(acrName)

          # Create/use a Buildx builder (idempotent)
          try { docker buildx create --use --name aksbuilder | Out-Null } catch { docker buildx use aksbuilder }

          # Optional: enable emulation for cross-builds (may no-op on some agents)
          try { docker run --rm --privileged tonistiigi/binfmt --install all | Out-Null } catch { Write-Host "binfmt install skipped (optional)" }

          # Build and push multi-arch images for all env tags
          docker buildx build `
             --platform linux/arm64,linux/amd64 `
             -t $(acrLoginServer)/$(imageName):dev `
             -t $(acrLoginServer)/$(imageName):qa  `
             -t $(acrLoginServer)/$(imageName):prod `
             --push .

- stage: Deploy_Dev
  displayName: Deploy to DEV
  dependsOn: Build
  jobs:
  - deployment: dev
    environment: aks-dev
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            displayName: "Get AKS kubecontext"
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference = 'Stop'
                az aks get-credentials -g $(aksResourceGroup) -n $(aksClusterName) --overwrite-existing
          - task: PowerShell@2
            displayName: Apply dev
            inputs:
              targetType: inline
              script: |
                kubectl apply -k k8s/overlays/dev
                kubectl rollout status deploy/fake-java-app -n dev
                kubectl get deploy,svc -n dev

- stage: Deploy_QA
  displayName: Deploy to QA
  dependsOn: Deploy_Dev
  jobs:
  - deployment: qa
    environment: aks-qa   # add approvals in Environments
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference = 'Stop'
                az aks get-credentials -g $(aksResourceGroup) -n $(aksClusterName) --overwrite-existing
          - task: PowerShell@2
            displayName: Apply dev
            inputs:
              targetType: inline
              script: |
                kubectl apply -k k8s/overlays/qa
                kubectl rollout status deploy/fake-java-app -n qa
                kubectl get deploy,svc -n qa

- stage: Deploy_Prod
  displayName: Deploy to PROD
  dependsOn: Deploy_QA
  jobs:
  - deployment: prod
    environment: aks-prod  # add approvals in Environments
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference = 'Stop'
                az aks get-credentials -g $(aksResourceGroup) -n $(aksClusterName) --overwrite-existing
          - task: PowerShell@2
            displayName: Apply dev
            inputs:
              targetType: inline
              script: |
                kubectl apply -k k8s/overlays/prod
                kubectl rollout status deploy/fake-java-app -n prod
                kubectl get deploy,svc -n prod

